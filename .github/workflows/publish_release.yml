name: Package into exe

on:
  release:
    types:
      - published

jobs:
  update_version:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.11" ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Get latest update time
        run: |
          config_time=$(git log -1 --format="%ad" --date=format:'%Y-%m-%d %H:%M:%S' -- config)
          data_time=$(git log -1 --format="%ad" --date=format:'%Y-%m-%d %H:%M:%S' -- data)
          images_time=$(git log -1 --format="%ad" --date=format:'%Y-%m-%d %H:%M:%S' -- images)
          model_time=$(git log -1 --format="%ad" --date=format:'%Y-%m-%d %H:%M:%S' -- model)
          requirements_time=$(git log -1 --format="%ad" --date=format:'%Y-%m-%d %H:%M:%S' -- requirements.txt)
          src_time=$(git log -1 --format="%ad" --date=format:'%Y-%m-%d %H:%M:%S' -- src)
          echo "{\"config\": \"$config_time\", \"data\": \"$data_time\", \"images\": \"$images_time\", \"model\": \"$model_time\", \"requirements\": \"$requirements_time\", \"src\": \"$src_time\"}" > version.json

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add version.json
          git commit -m "Update version.json"
          git checkout -b temp_version
          git push origin temp_version:main

  package_exe:
    runs-on: windows-latest
    needs: [update_version]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Package Exe by PyInstaller
        run: pyinstaller src/gui/app.py --noconfirm --add-data "images:images" --add-data "data:data" --add-data "config:config" --add-data "model:model" --add-data "version.json:." --name StarRailAutoProxy --collect-all cnocr

      - name: Zip All
        run: |
          7z a -r StarRailAutoProxy-${{ github.event.release.tag_name }}.zip dist/StarRailAutoProxy
          7z a -r config.zip config
          7z a -r data.zip data
          7z a -r images.zip images
          7z a -r model.zip model

      - name: Upload All
        run: |
          gh release upload ${{github.event.release.tag_name}} StarRailAutoProxy-${{ github.event.release.tag_name }}.zip
          gh release upload ${{github.event.release.tag_name}} config.zip
          gh release upload ${{github.event.release.tag_name}} data.zip
          gh release upload ${{github.event.release.tag_name}} images.zip
          gh release upload ${{github.event.release.tag_name}} model.zip
          gh release upload ${{github.event.release.tag_name}} dist/StarRailAutoProxy/StarRailAutoProxy.exe
          gh release upload ${{github.event.release.tag_name}} version.json
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
